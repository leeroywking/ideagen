{"version":3,"sources":["lightbulbYellow.png","resources/pair.js","resources/modal.js","resources/slidingModal.js","resources/useToggle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","list","returnrandPair","one","Math","floor","random","length","first","splice","two","second","ModalBackground","styled","div","ModalWrapper","ModalHeader","ModalTitle","h2","IconContainer","Modal","showCloseIcon","onClose","title","children","className","closeIcon","onClick","modalMarkup","ReactDOM","createPortal","document","body","defaultProps","ModalWithTransitionStyles","SlidingModal","props","formData","setFormData","useState","changer","e","console","log","target","name","value","initial","open","setOpen","useCallback","status","useToggle","isOpen","toggleOpen","type","CSSTransition","in","classNames","unmountOnExit","timeout","onSave","onSubmit","preventDefault","doit","onChange","App","src","logo","alt","window","location","reload","Boolean","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8d4f7de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lightbulbYellow.6edb6d85.png\";","import React from 'react'\n\nlet list = [\n\"Web development\",\n\"Cyber Security\",\n\"Pashto\",\n\"AWS\",\n\"Cloud\",\n\"Bicycle riding\",\n\"Rally fighter\",\n\"Motocross\",\n\"Concrete\",\n\"Army\",\n\"Military\",\n\"Sigint\",\n\"Raspberry pi\",\n\"Accessibility\",\n\"Hiking\",\n\"Edge computing\",\n\"Comedy\",\n\"Tiny living\",\n\"Ultralight\",\n\"Web development\",\n\"Linux\",\n\"The thing to your left\",\n\"git\"\n]\n\nfunction returnrandPair(){\n    let one = Math.floor(Math.random() * list.length);\n    let first = list.splice(one,1);\n    let two = Math.floor(Math.random() * list.length);\n    let second = list.splice(two, 1)\n    return(\n        <div>\n        <h1>{first}</h1>\n        <br/> and\n        <h1>{second} </h1>\n        </div>\n    )\n}\n\n\nexport default returnrandPair;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n// most of this code lifted from \n//react-sliding-modal-with-rtg-gsap-and-portals\n//by ostgals on codesandbox\n\n\nconst ModalBackground = styled.div`\n  background: rgba(0, 0, 0, 0.84);\n  height: 100%;\n  width: 25%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 99999;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow:hidden;\n`;\n\nconst ModalWrapper = styled.div`\n  width: 50vw;\n  overflow:hidden;\n  background: black;\n  max-height: 80vh;\n  z-index: 999999;\n  overflow: hidden;\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  background: light-yellow;\n  font-size: 0.6875rem;\n  line-height: 1.2;\n  letter-spacing: 0.1rem;\n  text-transform: uppercase;\n  font-weight: bold;\n  color: white;\n  height: 3rem;\n`;\n\nconst ModalTitle = styled.h2`\n  width: 100%;\n  margin: 0;\n  background: black;\n  font-weight: normal;\n  font-size: 0.875rem;\n  line-height: 3.5;\n  color: white;\n  letter-spacing: 0.1rem;\n  text-transform: uppercase;\n  text-align: center;\n`;\n\nconst IconContainer = styled.div`\n  width: 3rem;\n  height: 3rem;\n  background: black;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 0.25rem;\n  cursor: pointer;\n`;\n\nconst Modal = ({ showCloseIcon, onClose, title, children, className }) => {\n  const closeIcon = showCloseIcon ? (\n    <IconContainer onClick={onClose}>X</IconContainer>\n  ) : (\n    // hold open space for centered title\n    <IconContainer />\n  );\n\n  const modalMarkup = (\n    <ModalBackground className={className}>\n      <ModalWrapper>\n        <ModalHeader>\n          {closeIcon}\n          <ModalTitle>{title}</ModalTitle>\n        </ModalHeader>\n        {children}\n      </ModalWrapper>\n    </ModalBackground>\n  );\n\n  return ReactDOM.createPortal(modalMarkup, document.body);\n};\n\nModal.propTypes = {\n  /**\n   * Child nodes\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Close handler for modal button\n   */\n  onClose: PropTypes.func,\n  /**\n   * Title text to show in header\n   */\n  title: PropTypes.string.isRequired,\n  /**\n   * Whether to show a close icon\n   */\n  showCloseIcon: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  onClose: null,\n  showCloseIcon: true,\n};\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled from 'styled-components';\n\nimport Modal from './modal.js';\nimport { useToggle } from './useToggle.js';\n\n// most of this code lifted from \n//react-sliding-modal-with-rtg-gsap-and-portals\n//by ostgals on codesandbox\n\nconst duration = 250;\n\nconst ModalWithTransitionStyles = styled(Modal)`\n  &.modal-transition-enter {\n    transform: translateX(-100%);\n  }\n  &.modal-transition-enter-active {\n    transition: transform ${duration}ms;\n    transform: translateX(0);\n  }\n  &.modal-transition-exit {\n    transform: translateX(0);\n  }\n  &.modal-transition-exit-active {\n    transition: transform ${duration}ms;\n    transform: translateX(-100%);\n  }\n`;\n\n\n\n\n// function modalForm(props){  \n\n\n//   return(\n\n\n\n// )};\n\nconst SlidingModal = ({ props }) => {\n    let formData,setFormData;\n    [formData, setFormData] = useState({})\n\n  function changer(e){\n    // setFormState({...formState , e.target})\n    console.log(e.target.name)\n    console.log(e.target.value)\n    setFormData({...formData, [e.target.name]:e.target.value})\n  }\n\n  function doit(e){\n    e.preventDefault()\n    console.log(formData)\n  }\n  const [isOpen, toggleOpen] = useToggle(false);\n\n  return (\n    <>\n      <button type=\"button\" className=\"slidebutton\" onClick={toggleOpen}>\n        Add >\n      </button>\n      <CSSTransition\n        in={isOpen}\n        className=\"modal-transition\"\n        classNames=\"modal-transition\"\n        unmountOnExit\n        timeout={duration}\n      >\n        <ModalWithTransitionStyles\n          title=\"new idea?\"\n          open={isOpen}\n          onClose={toggleOpen}\n          onSave={toggleOpen}\n        >\n          <form onSubmit={(e) => doit(e)}>\n  <input type=\"text\" name=\"newPrompt\" className=\"textInput\" onChange={(e) => changer(e)}/>\n  <br/>\n  <button className=\"sendit\">submit </button>\n</form>\n        </ModalWithTransitionStyles>\n      </CSSTransition>\n    </>\n  );\n};\n\nexport default SlidingModal;\n","// most of this code lifted from \n//react-sliding-modal-with-rtg-gsap-and-portals\n//by ostgals on codesandbox\n\nimport { useState, useCallback } from \"react\";\n\nexport const useToggle = initial => {\n  const [open, setOpen] = useState(initial);\n\n  return [open, useCallback(() => setOpen(status => !status))];\n};\n","import React from 'react';\nimport logo from './lightbulbYellow.png';\nimport './App.css';\nimport Pair from './resources/pair.js'\nimport SlidingModal from './resources/slidingModal.js'\n\nfunction refreshPage(){\n  window.location.reload();\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* Need to implement context for this element  */}\n        <img src={logo} className=\"App-logo\" alt=\"logo\" onClick={()=> refreshPage()}/>\n        <div className=\"titletext\">Your suggestions for today are to think about this!!</div> \n        <p>\n        <Pair />\n        <SlidingModal />\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}